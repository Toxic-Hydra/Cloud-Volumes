// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

//Heavily Based upon Sebastian Lague's video: https://www.youtube.com/watch?v=Cp5WWtMoeKg
// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
Texture2D<float4> Origin;
RWTexture2D<float4> Result;

float4x4 WorldCamera;
float4x4 InverseCameraProj;

static const float maxIt = 70;
static const float EPSILON = 0.001f;

Texture2D<float4> Noise;
int noiseIterations;

struct Shape 
{
    float3 pos;
    float3 size;
    int operation;
    float blending;
    int children;
};

StructuredBuffer<Shape> scene;
int totalShapes;

//Ray struct containing stuff like ro and rd
struct Ray
{
    float3 origin;
    float3 direction;
};

// Really neat Distance Functions for RayMarching: https://iquilezles.org/www/articles/distfunctions/distfunctions.htm
//Alot of the usage comes from here: http://jamie-wong.com/2016/07/15/ray-marching-signed-distance-functions/
float sdSphere(float3 eye, float3 centre, float radius)
{
    //center here being center of sphere, so pos
    return distance( eye, centre) - radius;
    
}

Ray SetRay(float3 origin, float3 direction)
{
    Ray newRay;
    newRay.origin = origin;
    newRay.direction = direction;
    return newRay;   
}

Ray SetRayToCamera(float2 uv)
{
    float3 newOrigin = mul(WorldCamera, float4(0,0,0,1)).xyz;
    float3 newDirection = mul(InverseCameraProj, float4(uv,0,1)).xyz;
    //Continue multiplying to newDirection Matrix. WorldCamera and normalize
    newDirection = mul(WorldCamera, float4(newDirection,0)).xyz;
    newDirection = normalize(newDirection);
    
    return SetRay(newOrigin, newDirection);
}


float4 Blend(float a, float b, float k) {
    float h = clamp(0.5+0.5*(b-a)/k, 0.0, 1.0);
    float blendDst = lerp(b, a, h) - k*h*(1.0-h);
    
    
    return float4(float3(1.0, 1.0,1.0),blendDst);
}

//Combining multiple shapes together. Gives us that metaball style effect and 
//will be usefull in shaping.
float4 Combine(float distA, float distB, int operation, float blending)
{
    float dist = distA;
    
    if(operation == 0) {
        if(distB < distA) {
            dist = distB;
        }
    }
    else if(operation == 1) {
        float4 blend = Blend(distA, distB, blending);
        dist = blend.w;
        
    }
    else if(operation ==2) {
        if(-distB > dist) {
            dist = -distB;
        }
    }
    else if(operation == 3) {
        if(distB > dist) {
            dist = distB;
        }
    }
    
    return float4(float3(1.0, 1.0, 1.0),dist);
}

float displacement(float3 p) //iq function using it to test scene displacement
{
    return sin(20*p.x)*sin(20*p.y)*sin(20*p.z);
}

float4 Scene(float3 eye)
{
    float globalDist = maxIt;
    //iterating through all sdf's in scene
    for(int i = 0; i < totalShapes; i++) {
        Shape shape = scene[i];
        
        int shapeChildren = shape.children;
        
        float Dist = sdSphere(eye, shape.pos, shape.size.x);
        
        
        
        for(int j = 0; j < shapeChildren; j++) {
            Shape child = scene[i+j+1];
            float childDist = sdSphere(eye, child.pos, child.size.x);
            float4 combined = Combine(Dist, childDist, child.operation, child.blending);
            Dist = combined.w;
        }
        i+=shapeChildren;
        
        float4 fullCombine = Combine(globalDist, Dist, shape.operation, shape.blending);
        globalDist = fullCombine.w;
        
    }
    return float4(float3(1.0, 1.0, 1.0),globalDist);
}

//https://www.shadertoy.com/view/4djSRW
float3 hash( float3 p )
{
	p = float3( dot(p,float3(127.1,311.7, 74.7)),
			  dot(p,float3(269.5,183.3,246.1)),
			  dot(p,float3(113.5,271.9,124.6)));

	return frac(sin(p)*43758.5453123);
}


//iq gradient noise 3d
// returns 3D value noise
float noise( float3 x )
{
    // grid
    float3 p = floor(x);
    float3 w = frac(x);
    
    // quintic interpolant
    float3 u = w*w*w*(w*(w*6.0-15.0)+10.0);

    
    // gradients
    float3 ga = hash( p+float3(0.0,0.0,0.0) );
    float3 gb = hash( p+float3(1.0,0.0,0.0) );
    float3 gc = hash( p+float3(0.0,1.0,0.0) );
    float3 gd = hash( p+float3(1.0,1.0,0.0) );
    float3 ge = hash( p+float3(0.0,0.0,1.0) );
    float3 gf = hash( p+float3(1.0,0.0,1.0) );
    float3 gg = hash( p+float3(0.0,1.0,1.0) );
    float3 gh = hash( p+float3(1.0,1.0,1.0) );
    
    // projections
    float va = dot( ga, w-float3(0.0,0.0,0.0) );
    float vb = dot( gb, w-float3(1.0,0.0,0.0) );
    float vc = dot( gc, w-float3(0.0,1.0,0.0) );
    float vd = dot( gd, w-float3(1.0,1.0,0.0) );
    float ve = dot( ge, w-float3(0.0,0.0,1.0) );
    float vf = dot( gf, w-float3(1.0,0.0,1.0) );
    float vg = dot( gg, w-float3(0.0,1.0,1.0) );
    float vh = dot( gh, w-float3(1.0,1.0,1.0) );
	
    // interpolation
    return va + 
           u.x*(vb-va) + 
           u.y*(vc-va) + 
           u.z*(ve-va) + 
           u.x*u.y*(va-vb-vc+vd) + 
           u.y*u.z*(va-vc-ve+vg) + 
           u.z*u.x*(va-vb-ve+vf) + 
           u.x*u.y*u.z*(-va+vb+vc-vd+ve-vf-vg+vh);
}

//Adapted from book of shaders: https://gist.github.com/patriciogonzalezvivo/670c22f3966e662d2f83
float fbm(float3 x) {
	float v = 0.0;
	float a = 0.5;
	float3 shift = float3(100, 100, 100);
	for (int i = 0; i < noiseIterations; ++i) {
		v += a * noise(x);
		x = x * 2.0 + shift;
		a *= 0.5;
	}
	return v;
}

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
//This whole part is pretty much an adaptation of http://jamie-wong.com/2016/07/15/ray-marching-signed-distance-functions/
    uint width, height;
    Result.GetDimensions(width, height);
    
    Result[id.xy] = Origin[id.xy];
    
    float2 uv = id.xy / float2(width,height) *2 -1;
    float rayDist = 0;
    
    Ray ray = SetRayToCamera(uv);
    int marchIterations = 0;
    
    while(rayDist < maxIt) {
        marchIterations++;
        float3 surfacePoint = ray.origin + rayDist * ray.direction;//ray.direction
        float4 sceneInfo = Scene(ray.origin);
        
        float dist = sceneInfo.w;
        
        //Noise Application
        //dist += 0.5*(displacement(surfacePoint*float3(.3,.15,.3))-0.5); //Generates a fuzz ball.
        dist += fbm(surfacePoint); //single pass value perturbance. Need to consider fbm or position perturbance
        
        
        if(dist <= EPSILON) {
            
            
            
            //Normal
            //Light direction
            //Lighting
            
            
            //Shadows
            
            //Doing the basic, just seting the depth
            Result[id.xy] = float4( float3(1.0, 1.0, 1.0), 1); //Hardcoding the color white. we could multiple lighting and shadows here.
            //Result[id.xy] = Result[id.xy] * Noise[id.xy];
            break;
        }
        //Move along the ray
        ray.origin += ray.direction * dist;
        rayDist += dist;
    }
    
    
}
